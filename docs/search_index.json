[
["index.html", "Data Science in Education: A Step-by-Step Guide 1 A few notes before we get started", " Data Science in Education: A Step-by-Step Guide Will Doyle 2017-07-28 1 A few notes before we get started "],
["intro.html", "2 Welcome to Data Science! 2.1 Introductions 2.2 Installing R 2.3 Installing Rstudio 2.4 Installing git 2.5 Getting set up on GitHub 2.6 Initializing repos 2.7 Cloning down your repo 2.8 Yes We Code! Running R Code 2.9 Your first commit: hello_world.Rmd", " 2 Welcome to Data Science! Today, we’ll be working on getting you set up with the tools you will need for this class. Once you are set up, we’ll do what we’re here to do: analyze data! Here’s what we need to get done today: Introductions Installing R Installing Rstudio Installing git Getting set up on GitHub Initializing everyone’s github repos hello_world.Rmd 2.1 Introductions 2.2 Installing R R is going to be the only programming language we will use. R is an extensible statistical programming environment that can handle all of the main tasks that we’ll need to cover this semester: getting data, analyzing data and communicating data analysis. If you haven’t already, you need to download R here: https://cran.r-project.org/. 2.3 Installing Rstudio When we work with R, we communicate via the command line. To help automate this process, we can write scripts, which contain all of the commands to be executed. These scripts generate various kinds of output, like numbers on the screen, graphics or reports in common formats (pdf, word). Most programming languages have several _I_ntegrated _D_evelopment _E_nvironments (IDEs) that encompass all of these elements (scripts, command line interface, output). The primary IDE for R is Rstudio. If you haven’t already, you need to download Rstudio here: https://www.rstudio.com/products/rstudio/download2/. You need the free Rstudio desktop version. 2.4 Installing git git is a version control program. A standard problem in programming is how to track the changes that have been made to a project. These challenges are well-known to anyone who has had to work on a complex document, particularly with collaborators. Because these problems are particularly severe in programming, they developed a set of tools called version control. These will keep track of every change you make to a file, and record why you made the change. If you haven’t already, you need to download git here. Once you download and install git, you need to introduce yourself to git. Open up a terminal (type in “terminal” in spotlight search in Mac OS X, hit Windows-R and then type in “cmd” in windows) and enter the following two commands: git config --global user.name &quot;YOUR FULL NAME&quot; git config --global user.email &quot;YOUR EMAIL ADDRESS&quot; Make sure the email address is the same one you use to sign up for GitHub below. If you’re having trouble installing git, there are a couple of other options. If you’re on a Mac, you can install XCode. Git comes bundled with this, and should install cleanly. N.B.: this is a BIG file and install Install Github Desktop, available here:https://desktop.github.com/. With either, make sure you register your username and email. Again on a Mac, if you’re having issues with the git path, you may need to do a couple of things. First, go to the terminal and type in which git This will give you the path to your git executable. Then, in Rstudio, click “browse” to get to the executable. To be able to find all hidden files, click COMMAND+SHIFT+Period. If it’s located somewhere like /user/local/git/bin/git you’ll need to do something like this. You may also want to change the Path, by typing in the following at the terminal: export PATH=&quot;$PATH:&lt;path_to_git&gt;&quot;&quot; N.B. in this class, and generally in programming, when you see &lt;text&gt; that means that you need to substitute something in. 2.5 Getting set up on GitHub GitHub is online hosting service that is widely used by programmers. It allows you to easily share your work with the world. It is integrated with git, so version control is easy to do. 2.6 Initializing repos Everyone in the class will need a repository (repo from now on) on our GitHub organization. All I need from you is your username on GitHub, then I can add your repo to our organization. To integrate Rstudio with GitHub, you need to enable git as your version control within Rstudio. Instructions are here. 2.7 Cloning down your repo First in RStudio, you’ll need to generate an SSH key. This will let GitHub know it’s safe to talk to your computer. In RStudio, go to Preferences–&gt; Git/SVN, then click on “Create RSA Key”. Once that’s done, you can click on the blue text that says “View public key.” Copy all of the text in the public key. Now go to GitHub and in the upper right hand corner by your avatar, click on Settings. Go to SSH and GPG keys. Click “New SSH Key” and paste in the text you copied from Rstudio. Name the key, and you should be all set. From RStudio, you’ll need to click New Project–&gt;Version Control–&gt;GitHub–&gt;Then find your repo, which will be here https://github.com/hoddatascifall16/student_&lt;yourlastname&gt; Name the project “central”. Choose a good spot on your computer for the project files– wherever you usually keep class directories. This project will be the only place you need to work for this class the entire semester. Once you click “create project” all of the files should download and you should have your own version of all of the class files downloaded on your computer. N.B. in this class, and generally in programming, when you see &lt;text&gt; that means that you need to substitute something in. 2.8 Yes We Code! Running R Code The following code chunk will be our first use of R in this class. We’re going to grab some data that’s part of the college scorecard and do a bit of analysis on it. When we say that R is extensible, we mean that people in the community can write programs that everyone else can use. These are called “packages.” In these first few lines of code, I load two packages using the library command in R. The two packages, dplyr and ggplot2 were written by Hadley Wickham and play a key role in his book. ## Clear environment rm(list=ls()) ## Get necessary libraries-- won&#39;t work the first time, because you need to install them! library(tidyverse) Now we’re ready to load in data. The data frame will be our basic way of interacting with everything in this class. The sc data frame contains information from the college scorecard on 127 different colleges and univeristies. ## Load in the data load(&quot;college.Rdata&quot;) Here are the variables in the college.Rdata dataset: Variable Name :Definition unitid: Unit ID instnm: Institution Name stabbr: State Abbreviation year: Year control: control of institution, 1=public, 2= private non-profit, 3=private for-profit preddeg: predominant degree, 1= certificate, 2= associates, 3= bachelor’s, 4=graduate adm_rate: Proportion of Applicants Admitted sat_avg: Midpoint of entrance exam scores, on SAT scale, math and verbal only costt_4a: Average cost of attendance (tuition and room and board less all grant aid) debt_mdn: Median debt of graduates md_earn_ne_pg: Earnings of graduates who are not enrolled in higher education, six years after graduation Looking at datasets We can look at the first few rows and columns of sc by typing in the data name. We can look at the whole dataset using View. ## What does this data look like? Look at the first few rows, first few variables sc ## # A tibble: 127 × 9 ## unitid instnm stabbr year ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 446048 Ave Maria University FL 2009 ## 2 443410 DigiPen Institute of Technology WA 2009 ## 3 441186 San Diego State University-Imperial Valley Campus CA 2009 ## 4 404338 Schiller International University FL 2009 ## 5 169442 College for Creative Studies MI 2009 ## 6 168342 Williams College MA 2009 ## 7 167057 The New England Conservatory of Music MA 2009 ## 8 166027 Harvard University MA 2009 ## 9 166683 Massachusetts Institute of Technology MA 2009 ## 10 168148 Tufts University MA 2009 ## # ... with 117 more rows, and 5 more variables: adm_rate &lt;dbl&gt;, ## # sat_avg &lt;dbl&gt;, costt4_a &lt;int&gt;, debt_mdn &lt;dbl&gt;, md_earn_wne_p6 &lt;int&gt; #View(sc) Filter, Select, Arrange In exploring data, many times we want to look at smaller parts of the dataset. There are three commands we’ll use today that help with this. -filter selects only those cases or rows that meet some logical criteria. -select selects only those variables or coloumns that meet some criteria -arrange arranges the rows of a dataset in the way we want. For more on these, please see this vignette. Let’s grab just the data for Vanderbilt, then look only at the average test scores and admit rate. ## Where are we? sc%&gt;%filter(instnm==&quot;Vanderbilt University&quot;) ## # A tibble: 1 × 9 ## unitid instnm stabbr year adm_rate sat_avg costt4_a ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 221999 Vanderbilt University TN 2009 0.2015 1430 52303 ## # ... with 2 more variables: debt_mdn &lt;dbl&gt;, md_earn_wne_p6 &lt;int&gt; sc%&gt;%filter(instnm==&quot;Vanderbilt University&quot;)%&gt;%select(instnm,adm_rate,sat_avg ) ## # A tibble: 1 × 3 ## instnm adm_rate sat_avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Vanderbilt University 0.2015 1430 ## Just colleges with low admit rates: show admit rate and sat scores, arrange in a pleasing way sc%&gt;%filter(adm_rate&lt;.1)%&gt;%select(instnm,adm_rate,sat_avg)%&gt;%arrange(sat_avg,adm_rate) ## # A tibble: 6 × 3 ## instnm adm_rate sat_avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cooper Union for the Advancement of Science and Art 0.0735 1336 ## 2 Stanford University 0.0797 1436 ## 3 Harvard University 0.0719 1468 ## 4 Yale University 0.0856 1475 ## 5 Dell&#39;Arte International School of Physical Theatre 0.0000 NA ## 6 The Juilliard School 0.0711 NA ## Just colleges with low admit rates: order by sat scores (- sat_avg gives descending) sc%&gt;%filter(adm_rate&lt;.1)%&gt;%select(instnm,adm_rate,sat_avg)%&gt;%arrange(-sat_avg) ## # A tibble: 6 × 3 ## instnm adm_rate sat_avg ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Yale University 0.0856 1475 ## 2 Harvard University 0.0719 1468 ## 3 Stanford University 0.0797 1436 ## 4 Cooper Union for the Advancement of Science and Art 0.0735 1336 ## 5 The Juilliard School 0.0711 NA ## 6 Dell&#39;Arte International School of Physical Theatre 0.0000 NA ## New cut sc%&gt;%filter(adm_rate&gt;.3)%&gt;%select(instnm,sat_avg,md_earn_wne_p6,stabbr)%&gt;%arrange(stabbr,-sat_avg)%&gt;%print(n=100) ## # A tibble: 72 × 4 ## instnm sat_avg ## &lt;chr&gt; &lt;dbl&gt; ## 1 Henderson State University 1048 ## 2 University of Arkansas at Pine Bluff 784 ## 3 University of Advancing Technology NA ## 4 Scripps College 1336 ## 5 University of California-San Diego 1247 ## 6 Pepperdine University 1230 ## 7 California Polytechnic State University-San Luis Obispo 1205 ## 8 San Diego State University 1050 ## 9 Hope International University 975 ## 10 San Diego State University-Imperial Valley Campus 825 ## 11 The Art Institute of California-Argosy University San Francisco NA ## 12 Colorado College 1326 ## 13 Connecticut College NA ## 14 George Washington University 1276 ## 15 Delaware State University 868 ## 16 Ave Maria University 1104 ## 17 Florida International University 1102 ## 18 Brenau University 965 ## 19 National Louis University NA ## 20 Grambling State University 851 ## 21 Brandeis University 1367 ## 22 Boston College 1343 ## 23 The New England Conservatory of Music NA ## 24 The Boston Conservatory NA ## 25 College for Creative Studies 970 ## 26 Rocky Mountain College 1042 ## 27 University of North Carolina at Chapel Hill 1305 ## 28 Campbell University 1018 ## 29 Shaw University NA ## 30 Wake Forest University NA ## 31 Nebraska Methodist College of Nursing &amp; Allied Health 1030 ## 32 New Jersey City University 835 ## 33 Colgate University 1357 ## 34 University of Rochester 1334 ## 35 New York University 1317 ## 36 SUNY College at Geneseo 1310 ## 37 SUNY at Binghamton 1265 ## 38 Stony Brook University 1193 ## 39 Marist College 1161 ## 40 State University of New York at New Paltz 1115 ## 41 SUNY Oneonta 1098 ## 42 SUNY Institute of Technology at Utica-Rome 1086 ## 43 CUNY Queens College 1060 ## 44 CUNY Brooklyn College 1035 ## 45 CUNY City College 1015 ## 46 CUNY Lehman College 910 ## 47 Bard College NA ## 48 St Lawrence University NA ## 49 Manhattan School of Music NA ## 50 Oberlin College 1360 ## 51 Ohio Christian University 901 ## 52 Central State University 759 ## 53 Wilberforce University NA ## 54 Carnegie Mellon University 1392 ## 55 Lehigh University 1300 ## 56 Lincoln University of Pennsylvania 812 ## 57 University of Puerto Rico-Rio Piedras 1206 ## 58 Bayamon Central University NA ## 59 Universidad del Sagrado Corazon NA ## 60 Universidad Central Del Caribe NA ## 61 Inter American University of Puerto Rico-Bayamon NA ## 62 Inter American University of Puerto Rico-Arecibo NA ## 63 Inter American University of Puerto Rico-Guayama NA ## 64 Rhode Island School of Design 1244 ## 65 Claflin University 895 ## 66 Hardin-Simmons University 1047 ## 67 South University-The Art Institute of Dallas NA ## 68 Southwestern Assemblies of God University NA ## 69 College of William and Mary 1339 ## 70 University of Virginia-Main Campus 1332 ## 71 University of Richmond 1261 ## 72 DigiPen Institute of Technology 1194 ## # ... with 2 more variables: md_earn_wne_p6 &lt;int&gt;, stabbr &lt;chr&gt; Quick Exercise Choose a different college and two different things about that college. Summarizing Data ## What&#39;s the average median debt? sc%&gt;%summarize(mean_debt=mean(debt_mdn,na.rm=TRUE)) ## # A tibble: 1 × 1 ## mean_debt ## &lt;dbl&gt; ## 1 13428.78 Quick Exercise Summarize the average entering SAT scores in this dataset. sc%&gt;%summarize(mean_sat=mean(sat_avg,na.rm=TRUE)) ## # A tibble: 1 × 1 ## mean_sat ## &lt;dbl&gt; ## 1 1192.89 Combining Commands We can also combine commands, so that summaries are done on only a part of the dataset. Below, I summarize mediand debt for selective schools, and not very selective schools. ## What&#39;s the average median debt for very selective schools? sc%&gt;%filter(adm_rate&lt;.1)%&gt;%summarize(mean_debt=mean(debt_mdn,na.rm=TRUE)) ## # A tibble: 1 × 1 ## mean_debt ## &lt;dbl&gt; ## 1 8264.5 ## And for not very selective schools? sc%&gt;%filter(adm_rate&gt;.3)%&gt;%summarize(mean_debt=mean(debt_mdn,na.rm=TRUE)) ## # A tibble: 1 × 1 ## mean_debt ## &lt;dbl&gt; ## 1 14120.92 Quick Exercise Calcualte average earnings for schools where SAT&gt;1200 sc%&gt;%filter(sat_avg&gt;1200)%&gt;%summarize(mean_earn=mean(md_earn_wne_p6,na.rm=TRUE)) ## # A tibble: 1 × 1 ## mean_earn ## &lt;dbl&gt; ## 1 50220 Grouping Data Another powerful tool is being able to calculate characteristics for various groups. For example, what are the average earnings for the three different types of colleges (public, private non-profit, private for-profit) in the dataset? # # sc%&gt;%group_by(control) # %&gt;% # summarize(mean_earnings=mean(md_earn_wne_p6)) # # sc%&gt;%group_by(control)%&gt;% # summarize(mean_debt=mean(debt_mdn)) Plotting Data The last basic tool for looking at a dataset is plotting the data. ## Plotting: bivariate gg&lt;-ggplot(data=sc,aes(x=sat_avg,y=adm_rate)) gg&lt;-gg+geom_point() gg&lt;-gg+geom_smooth() gg ## `geom_smooth()` using method = &#39;loess&#39; ## Warning: Removed 27 rows containing non-finite values (stat_smooth). ## Warning: Removed 27 rows containing missing values (geom_point). ## Univariate descriptives gg&lt;-ggplot(data=sc,aes(adm_rate)) gg&lt;-gg+geom_density() gg Quick exercise Replicate the above plots, but put cost of attendance on the y axis. 2.9 Your first commit: hello_world.Rmd .Rmd files will be the only file format we work in this class. .Rmd files contain three basic elements: Script that can be interpreted by R. Output generated by R, including tables and figures. Text that can be read by humans. From a .Rmd file you can generate html documents, pdf documents, word documents, slides . . . lots of stuff. All class notes will be in .Rmd. All assignments will be turned in as .Rmd files, and your final project? You guessed it, .Rmd. For today, I want you to create a file called hello_world_&lt;lastname&gt;.Rmd in your github repo for assignment 1. It should contain the following elements: A sentence that says “Hello, World” R output that summarizes one of the variables in the colllege.Rdata dataset R output that shows a scatterplot for two of the variables in the college.Rdata dataset. Lucky for you this is is also your first assignment! Submit it under assignment 1, using the format assignment1_&lt;lastname&gt;.Rmd. All assignments should be turned in using this format. Stretch Items If you have extra time, you can do the following: Calculate the average earnings for individuals at the most selective colleges, then compare that with individuals at the least selective colleges in the dataset. Find a way to determine whether colleges with very high SAT scores tend to be larger or smaller than colleges with low SAT scores. Plot the relationship between cost and debt. What do you see? Does this surprise you? Now, provide separate plots for cost and debt by control of the institution. "],
["conditional-means.html", "3 Conditional Means 3.1 Dataset for this week 3.2 Dependent Variable 3.3 Unconditional Means 3.4 Conditional Means With One Predictor Variable 3.5 Conditional Means with Multiple Predictors 3.6 Final Comparison 3.7 Applications of the Conditional Mean", " 3 Conditional Means The conditional mean will be our first predictive algorithm. Conditional means answer the question: “Given what we know about a certain case, what can expect to see on average?” The conditional mean is a powerful tool that is typically quite easy to explain to decision-makers. We’ll go through the following steps: Computing and plotting unconditional means Computing and plotting conditional means using a single predictor. Computing and plotting conditional means using multiple predictors. 3.1 Dataset for this week We will be working with a dataset put together by the census bureau that summarizes the characteristics of the 3,088 counties in the United States. load(&quot;pd.Rdata&quot;) pd ## # A tibble: 3,088 × 55 ## fips pop2013 pop2010_base popchange_pc pop2010 popu5 popu18 pop65p ## * &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 01001 55246 54571 1.2 54571 6.1 25.4 13.5 ## 2 01003 195540 182265 7.3 182265 5.7 22.4 18.1 ## 3 01005 27076 27457 -1.4 27457 5.8 21.1 15.9 ## 4 01007 22512 22919 -1.8 22915 5.3 21.3 14.3 ## 5 01009 57872 57322 1.0 57322 6.1 23.8 16.4 ## 6 01011 10639 10915 -2.5 10914 6.3 21.0 14.6 ## 7 01013 20265 20946 -3.3 20947 6.1 23.3 17.7 ## 8 01015 116736 118572 -1.5 118572 5.8 22.2 15.5 ## 9 01017 34162 34170 0.0 34215 5.9 21.4 17.8 ## 10 01019 26203 25986 0.8 25989 4.8 20.7 20.1 ## # ... with 3,078 more rows, and 47 more variables: female_pc &lt;dbl&gt;, ## # white_pc &lt;dbl&gt;, black_pc &lt;dbl&gt;, am_ind_pc &lt;dbl&gt;, asian_pc &lt;dbl&gt;, ## # hawaii_pi_pc &lt;dbl&gt;, twomore_race_pc &lt;dbl&gt;, hispanic_pc &lt;dbl&gt;, ## # white_non_hispanic_pc &lt;dbl&gt;, same_house_pc &lt;dbl&gt;, ## # foreign_born_pc &lt;dbl&gt;, other_eng_home_pc &lt;dbl&gt;, hs_grad_pc &lt;dbl&gt;, ## # coll_grad_pc &lt;dbl&gt;, veterans &lt;int&gt;, travel_time &lt;dbl&gt;, ## # housing_units &lt;int&gt;, homeown_rate &lt;dbl&gt;, house_unit_multi &lt;dbl&gt;, ## # median_home_val &lt;int&gt;, households &lt;int&gt;, person_per_hh &lt;dbl&gt;, ## # per_capita_inc &lt;int&gt;, median_hh_inc &lt;int&gt;, ## # persons_below_poverty &lt;dbl&gt;, pv_nonfarm &lt;int&gt;, ## # pv_nonfarm_employ &lt;int&gt;, pv_nonfarm_employ_ch &lt;dbl&gt;, ## # nonemployer_est &lt;int&gt;, firms &lt;int&gt;, firms_black_own_pc &lt;dbl&gt;, ## # firms_amind_own_pc &lt;dbl&gt;, firms_asian_own_pc &lt;dbl&gt;, ## # firms_hawaii_pi_own_pc &lt;dbl&gt;, firms_hispanic_own_pc &lt;dbl&gt;, ## # firms_female_own_pc &lt;dbl&gt;, manufacture_ship &lt;dbl&gt;, wholesale &lt;dbl&gt;, ## # retail &lt;dbl&gt;, retail_percap &lt;int&gt;, hospitality &lt;int&gt;, ## # bldg_permits &lt;int&gt;, land_area &lt;dbl&gt;, pop_per_square &lt;dbl&gt;, ## # county &lt;chr&gt;, percapinc.2010 &lt;dbl&gt;, percapinc.2012 &lt;dbl&gt; The codebook for this dataset is stored as another dataset, labels_explain. The first column in this dataset is variable names, the second column is a full explanation of that variable. ## Full explanation of data load(&quot;lab_explain.Rdata&quot;) lab_explain ## # A tibble: 51 × 2 ## varname label ## &lt;fctr&gt; &lt;fctr&gt; ## 1 pop2013 Population, 2013 estimate ## 2 pop2010_base Population, 2010 (April 1) estimates base ## 3 popchange_pc Population, percent change - April 1, 2010 to July 1, 2013 ## 4 pop2010 Population, 2010 ## 5 popu5 Persons under 5 years, percent, 2013 ## 6 popu18 Persons under 18 years, percent, 2013 ## 7 pop65p Persons 65 years and over, percent, 2013 ## 8 female_pc Female persons, percent, 2013 ## 9 white_pc White alone, percent, 2013 ## 10 black_pc Black or African American alone, percent, 2013 ## # ... with 41 more rows Quick Exercise: Find the per capita income and the percent of the population with a bachelor’s degree for the county you’re from. 3.2 Dependent Variable Our working example will be based on predicting income in a given county. Suppose we want to know what income level we can expect for a geographic area based on observed characteristics, such as the proportion of the population with a bachelor’s degree. How would we predict the income based on what we know about the geographic area? Let’s begin by plotting the data to see what it looks like. To do this I need to first rank the counties by income. To create a rank variable that will be stored in the pd dataset, I use the mutate command. This creates a variable based on some calculation then stores it in the same dataset. I’m then going to plot incomes for each county in descending rank order. Using the plotly library I can make this interactive so we know which counties we’re talking about. ## Create a rank variable for income pd&lt;-pd%&gt;%mutate(percapinc_rank=rank(percapinc.2010)) ## Plot by rank gg&lt;-ggplot(data=pd , aes(x=percapinc_rank, y=percapinc.2010, text=county)) ##Add Axis Labels gg&lt;-gg+xlab(&quot;Rank&quot;)+ylab(&quot;Per Capita Income, 2010&quot;) ## Add Points gg&lt;-gg+geom_point(alpha=.5,size=.5) gg ## Save for later gg1&lt;-gg # Make Interactive plot #gg_p&lt;-ggplotly(gg) #gg_p 3.3 Unconditional Means If you were asked to predict the income for a given area without any additional information, the likely best guess is the overall average. We’re going to begin with the unconditional mean, or simple average, as our first prediction. We’ll again use the mutate command to plug in a variable that will be the average for every county, and we’ll plot this as a predictor. Our notation for the unconditional mean as a predictor is: \\[\\hat{Y}=\\bar{Y} \\] ##Unconditional Average pd%&gt;%summarize(mean_percapinc.2010=mean(percapinc.2010,na.rm=TRUE)) ## # A tibble: 1 × 1 ## mean_percapinc.2010 ## &lt;dbl&gt; ## 1 34002.98 ##Unconditional Average as a Predictor pd&lt;-pd%&gt;%mutate(mean_percapinc.2010=mean(percapinc.2010,na.rm=TRUE)) ##Plotting gg&lt;-ggplot(data=pd,aes(y=percapinc.2010,x=percapinc_rank,color=&quot;Actual&quot;)) gg&lt;-gg+geom_point(alpha=.5,size=.5) gg&lt;-gg+geom_point(aes(y=mean_percapinc.2010,x=percapinc_rank, color=&quot;Predicted: Unconditional Mean&quot;), size=.5) gg&lt;-gg+xlab(&quot;Rank of Per Capita Income&quot;)+ylab(&quot;Per Capita Income&quot;) gg&lt;-gg+scale_color_manual(name=&quot;Type&quot;, values=c(&quot;Actual&quot;=&quot;black&quot;, &quot;Predicted: Unconditional Mean&quot;=&quot;blue&quot;) ) gg&lt;-gg+theme(legend.position=&quot;bottom&quot;) gg ##Save for later gg2&lt;-gg This is of course a terrible prediction. In the absence of any other information, it’s many times the best we can do, but we really ought to be able to do better. To understand how far off we are, we need to summarize our errors. We will use different ways of doing this this semester, but let’s start with a very standard one, Root Mean Squared Error, or RMSE. An error term is the vertical distance between each point and its prediction. The RMSE is the square root of the sum of squared errors (why do we square them?). \\[RMSE(\\hat{Y})=\\sqrt{ 1/n \\sum_{i=1}^n(Y_i-\\hat{Y_i})^2} \\] pd&lt;-pd%&gt;%mutate(e1=percapinc.2010-mean_percapinc.2010) ## RMSE rmse &lt;- function(error) # Function that returns Root Mean Squared Error { sqrt(mean(error^2)) } rmse1&lt;-rmse(pd$e1) rmse1 ## [1] 7817.037 3.4 Conditional Means With One Predictor Variable To incorporate additional information into the mean, we need to calculate averages at levels of other predictors. Let’s calculate the average per capita income at different levels of college education. The code below will calculate average income across counties at four different levels of college education– the four quantiles of college education in the dataset. ##Condtional Average across a single variable myprob=.25 ## This gives the number of groups--.25=4 groups ## Create a variable for quantiles of college education pd&lt;-pd%&gt;%mutate(coll_grad_level=cut(coll_grad_pc, breaks=quantile(coll_grad_pc, probs=seq(0,1,by=myprob) ) ) ) table(pd$coll_grad_level) ## ## (3.7,13.5] (13.5,17.2] (17.2,22.9] (22.9,71.2] ## 778 772 767 770 pd&lt;-pd%&gt;%group_by(coll_grad_level)%&gt;% ## Group by predictor ##Calculate mean at each level of predictor mutate(pred_income_college=mean(percapinc.2010))%&gt;% ## Ungroup ungroup()%&gt;% #Rank by prediction, with ties sorted randomly mutate(pred_income_college_rank=rank(pred_income_college,ties.method=&quot;random&quot;))%&gt;% #Calulcate error mutate(e2=percapinc.2010-pred_income_college) gg&lt;-ggplot(data=pd,aes(x=pred_income_college_rank,y=percapinc.2010,color=&quot;Actual&quot;)) gg&lt;-gg+geom_point(alpha=.5,size=.5) gg&lt;-gg+geom_point(aes(x=pred_income_college_rank,y=pred_income_college,color=&quot;Predicted:Conditional Mean, 1 var&quot;)) gg&lt;-gg+ scale_color_manual(&quot;Type&quot;,values=c(&quot;Predicted:Conditional Mean, 1 var&quot;=&quot;red&quot;,&quot;Actual&quot;=&quot;black&quot;)) gg&lt;-gg+theme(legend.position=&quot;bottom&quot;) gg&lt;-gg+xlab(&quot;Rank&quot;)+ylab(&quot;Per Capita Income, 2010&quot;) gg ##Save for later gg3&lt;-gg Quick Exercise: Calculate per capita income as a function of the proportion of the county with a high school education Let’s see what happened to our RMSE when we did a conditional as opposed to an unconditional mean. rmse2&lt;-rmse(pd$e2) rmse2 ## [1] 6419.405 3.5 Conditional Means with Multiple Predictors The next step is to then incorporate more information from additional variables. Let’s calculate the average income by both quartiles of both the population with a bachelor’s degree and median home values. ##Condtional average across multiple variables ## Calculate quartiles of home value pd&lt;-pd%&gt;%mutate(median_home_level=cut(median_home_val, breaks=quantile(median_home_val, probs=seq(0,1,by=myprob ) ) )) table(pd$median_home_level) ## ## (1.94e+04,8.24e+04] (8.24e+04,1.07e+05] (1.07e+05,1.54e+05] ## 772 772 771 ## (1.54e+05,9.44e+05] ## 772 ##Make prediction: income by quartiles of education and home values pd&lt;-pd%&gt;%group_by(coll_grad_level,median_home_level)%&gt;% ## Grouping at multiple levels mutate(pred_income_college_home=mean(percapinc.2010))%&gt;%ungroup()%&gt;% mutate(pred_income_college_home_rank=rank(pred_income_college_home, ties.method=&quot;random&quot;))%&gt;% mutate(e3=percapinc.2010-pred_income_college_home) ## Showing the various levels quantile(x=pd$pred_income_college_home,probs=seq(0,1,by=myprob)) ## 0% 25% 50% 75% 100% ## 21290.00 29725.54 33376.52 36923.41 42015.80 gg&lt;-ggplot(data=pd,aes(x=pred_income_college_home_rank,y=percapinc.2010,color=&quot;Actual&quot;)) gg&lt;-gg+geom_point(alpha=.5,size=.5) gg&lt;-gg+geom_point(aes(x=pred_income_college_home_rank, y=pred_income_college_home, color=&quot;Predicted:Conditional Mean, 2 vars&quot;) ) gg&lt;-gg+scale_color_manual(&quot;Type&quot;,values=c(&quot;Actual&quot;=&quot;black&quot;, &quot;Predicted:Conditional Mean, 2 vars&quot;=&quot;orange&quot; )) gg&lt;-gg+theme(legend.position=&quot;bottom&quot;) gg&lt;-gg+xlab(&quot;Rank&quot;)+ylab(&quot;Per Capita Income&quot;) gg ## Save for later gg4&lt;-gg This is clearly much better: our predictions appear to be much closer to the actual data points more of the time. And what happened to RMSE? rmse3&lt;-rmse(pd$e3) rmse3 ## [1] 6240.328 3.6 Final Comparison Let’s put all of the plots together to compare. gg5&lt;-grid.arrange(gg1,gg2,gg3,gg4,nrow=2) gg5 ## TableGrob (2 x 2) &quot;arrange&quot;: 4 grobs ## z cells name grob ## 1 1 (1-1,1-1) arrange gtable[layout] ## 2 2 (1-1,2-2) arrange gtable[layout] ## 3 3 (2-2,1-1) arrange gtable[layout] ## 4 4 (2-2,2-2) arrange gtable[layout] Quick Exercise: Predict income using two other variables 3.7 Applications of the Conditional Mean When might we use the conditional mean? Caluclating average sales for a retail location by day of the week and month Calculating yield rate (proportion of admitted students who attend) by geographic region and income level for a college. Calculating average employee turnover by level of education and gender "]
]
